[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=1]
default_input_values = [ 0, Vector3( 1, 1, 1 ) ]
function = 5

[sub_resource type="VisualShaderNodeColorFunc" id=2]
default_input_values = [ 0, Vector3( 1, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
default_input_values = [ 0, 0.2 ]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// ColorFunc:3
	vec3 n_in3p0 = vec3(1.00000, 0.00000, 0.00000);
	vec3 n_out3p0;
	{
		vec3 c = n_in3p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out3p0 = vec3(max3, max3, max3);
	}

// VectorFunc:2
	vec3 n_out2p0;
	{
		vec3 c = n_out3p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out2p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// ScalarFunc:4
	float n_in4p0 = 0.20000;
	float n_out4p0 = sign(n_in4p0);

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -585, 164 )
nodes/fragment/0/position = Vector2( 260, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -60, 200 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -300, 220 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -60, 280 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 0, 3 )
